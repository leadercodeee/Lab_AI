package chapter2.agent_AB;

import chapter2.agent_AB.Environment.LocationState;

public class AgentProgram {
	private int score;
	
	public AgentProgram(int score) {
		this.score = 0;
	}
	public int getScore() {
		return score;
	}
	//Lab1_Bai1
	public Action execute(Percept p) {// location, status
		if(p.getLocationState() == LocationState.DIRTY ) {
			return Environment.SUCK_DIRT;
		}else if(p.getAgentLocation()== Environment.LOCATION_A) {
			return Environment.MOVE_RIGHT;
		}else if(p.getAgentLocation()== Environment.LOCATION_A) {
			return Environment.MOVE_LEFT;
		}
		return NoOpAction.NO_OP;
	}

public void executeAction(Action action,Percept [][] environment, int[] currentPosition) {
    int currentRow = currentPosition[0];
    int currentCol = currentPosition[1];

    if (action == Environment.SUCK_DIRT) {
    	  if (environment[currentRow][currentCol].getLocationState() == LocationState.DIRTY) {
              score += 500;
             
        }
    } else {
        int newRow = currentRow;
        int newCol = currentCol;

        // Calculate the new position based on the action
        if (action == Environment.MOVE_LEFT && currentCol > 0) {
            newCol--;
        } else if (action == Environment.MOVE_RIGHT && currentCol < environment[0].length - 1) {
            newCol++;
        } else if (action == Environment.MOVE_UP&& currentRow > 0) {
            newRow--;
        } else if (action == Environment.MOVE_DOWN && currentRow < environment.length - 1) {
            newRow++;
        } else {
            score -= 100; // Unable to move
            return;
        }

        // Check if the new position is valid
        if (environment[newRow][newCol].getLocationState() != LocationState.CLEAN) {
            score -= 10; // Moving to a dirty cell
        }

        // Update the position
        currentPosition[0] = newRow;
        currentPosition[1] = newCol;
    }
}
}
